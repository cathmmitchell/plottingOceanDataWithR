cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
#reshaping into a data frame
lat <- matrix(interpReference$x,ncol=40,nrow=40)
depth <- t(matrix(interpReference$y,ncol=40,nrow=40))
vardata <- as.vector(interpReference$z)
lats <- as.vector(lat)
depths <- as.vector(depth)
#putting the lists together as a data frame
newdf <- data.frame(varname = vardata, latitude = lats, depth = depths) %>%
rename(varname = variable)
#outputting the new data frame
return(newdf)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20171109)
cruiseinterpolation <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
#reshaping into a data frame
lat <- matrix(interpReference$x,ncol=40,nrow=40)
depth <- t(matrix(interpReference$y,ncol=40,nrow=40))
vardata <- as.vector(interpReference$z)
lats <- as.vector(lat)
depths <- as.vector(depth)
#putting the lists together as a data frame
newdf <- data.frame(varname = vardata, latitude = lats, depth = depths)
#renaming the variable column header to the same as the original data frame
names(newdf)[names(newdf) == "varname"] <- variable
#outputting the new data frame
return(newdf)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20171109)
interpolationplot(plotData,'avg','fluorescence')
View(plotData)
cruiseinterpolation <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
#reshaping into a data frame
lat <- matrix(interpReference$x,ncol=40,nrow=40)
depth <- t(matrix(interpReference$y,ncol=40,nrow=40))
vardata <- as.vector(interpReference$z)
lats <- as.vector(lat)
depths <- as.vector(depth)
#putting the lists together as a data frame
newdf <- data.frame(varname = vardata, latitude = lats, depth_m = depths)
#renaming the variable column header to the same as the original data frame
names(newdf)[names(newdf) == "varname"] <- variable
#outputting the new data frame
return(newdf)
}
interpolationplot <- function(cruiseDataframe, origDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = origDataframe, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
interpolationplot <- function(cruiseDataframe, origDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = cruiseDataframe, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20171109)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3','fluorescence')
interpolationplot <- function(cruiseDataframe, origDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = origDataframe, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3','fluorescence')
cruiseinterpolation <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
#renaming the variable column header to the same as the original data frame
names(newdf)[names(newdf) == "varname"] <- variable
#outputting the new data frame
return(newdf)
}
interpolationplot <- function(cruiseDataframe, origDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
#geom_point(data = origDataframe, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3','fluorescence')
View(plotData)
cruiseinterpolation <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
#renaming the variable column header to the same as the original data frame
names(newdf)[names(newdf) == "varname"] <- variable
#outputting the new data frame
return(newdf)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3','fluorescence')
interpolationplot <- function(cruiseDataframe, origDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = origDataframe, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3','fluorescence')
plotData
interpolationplot <- function(cruiseDataframe, variable, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,'fluorescence_mg_m3','fluorescence')
interpolationplot <- function(cruiseDataframe, origDataframe, variable, cruiseDate, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
# to include the measurement locations in the figure, we need to to filter out
# our cruise from the original data frame
sampleData <- origData %>% filter(date == cruiseDate)
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = sampleData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,'fluorescence_mg_m3','fluorescence')
interpolationplot <- function(cruiseDataframe, origDataframe, variable, cruiseDate, colorlabel){
# returns a heatmap style plot of a variable based on latitude and depth
# to include the measurement locations in the figure, we need to to filter out
# our cruise from the original data frame
sampleData <- origDataframe %>% filter(date == cruiseDate)
p<- ggplot(cruiseDataframe, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = .data[[variable]])) +
geom_contour(aes(z = .data[[variable]]),color="white") +
geom_point(data = sampleData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,'fluorescence_mg_m3','fluorescence')
View(fieldData)
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,'fluorescence_mg_m3',20160908,'fluorescence')
plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
interpolationplot(plotData,fieldData,'fluorescence_mg_m3',20160908,'fluorescence')
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname]]),color="white") +
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate, colorlabel){
# return a data frame with a variable interpolated based on depth and latitude
# for a given cruise data
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
#plotData <- cruiseinterpolation(fieldData, 'fluorescence_mg_m3', 20160908)
#interpolationplot(plotData,'fluorescence_mg_m3','fluorescence')
cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',20160908,'fluorescence')
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate, colorlabel){
# return a heatmap style plot for a variable interpolated over latitude and
# depth
# Inputs: dataframe = raw data frame of the DamariscottaRiverData
#         variable = data frame column name (as a string) of the variable to
#                    interpolate
#         cruiseData = numeric value of date in yyyymmdd (to compare with the
#                      dataframe$date column)
#         colorlabel = label for the color bar (as a string)
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate, colorlabel){
# return a heatmap style plot for a variable interpolated over latitude and
# depth
# Inputs: dataframe = raw data frame of the DamariscottaRiverData
#         variable = data frame column name (as a string) of the variable to
#                    interpolate
#         cruiseData = numeric value of date in yyyymmdd (to compare with the
#                      dataframe$date column)
#         colorlabel = label for the color bar (as a string)
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',20160908,'fluorescence')
for (ii in 1:4) {
print("hello")
}
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate, colorlabel){
# return a heatmap style plot for a variable interpolated over latitude and
# depth
# Inputs: dataframe = raw data frame of the DamariscottaRiverData
#         variable = data frame column name (as a string) of the variable to
#                    interpolate
#         cruiseData = numeric value of date in yyyymmdd (to compare with the
#                      dataframe$date column)
#         colorlabel = label for the color bar (as a string)
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel, title = as.char(cruiseDate)) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',20160908,'fluorescence')
cruiseInterpolationPlot <- function(dataframe, variable, cruiseDate, colorlabel){
# return a heatmap style plot for a variable interpolated over latitude and
# depth
# Inputs: dataframe = raw data frame of the DamariscottaRiverData
#         variable = data frame column name (as a string) of the variable to
#                    interpolate
#         cruiseData = numeric value of date in yyyymmdd (to compare with the
#                      dataframe$date column)
#         colorlabel = label for the color bar (as a string)
cruiseData <- dataframe %>% filter(date == cruiseDate)
#interpolate our data:
interpReference <- interp(cruiseData$latitude, cruiseData$depth_m, cruiseData[[variable]])
newdf <- expand.grid(latitude=interpReference$x,
depth_m = interpReference$y) %>%
mutate(varname = as.vector(interpReference$z))
p<- ggplot(newdf, aes(x=latitude, y=depth_m)) +
geom_tile(aes(fill = varname)) +
geom_contour(aes(z = varname),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill=colorlabel, title = as.character(cruiseDate)) +
scale_fill_distiller(palette="Greens",direction=1)
return(p)
}
cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',20160908,'fluorescence')
for (ii in 1:4) {
print(paste(ii,"hello"))
}
mylst <- vector("list",length=4)
for (ii in 1:4) {
mylst[[ii]] = ii*10
}
print(mylst)
mylst <- vector("list",length=4)
for (ii in 1:4) {
mylst[[ii]] = ii*10
}
alldates <- unique(fieldData $>$ filter(year == 2016))
alldates <- unique(fieldData %>% filter(year == 2016))
for (dd in alldates){
print(cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',dd,'fluorescence'))
}
alldates <- unique(fieldData %>% filter(year == 2016))
for (dd in alldates){
print(dd)
print(cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',dd,'fluorescence'))
}
View(alldates)
data2016 <- fieldData %>% filter(year == 2016)
alldates <- unique(data2016)
for (dd in alldates){
print(dd)
print(cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',dd,'fluorescence'))
}
data2016 <- fieldData %>% filter(year == 2016)
alldates <- unique(data2016$date)
for (dd in alldates){
print(dd)
print(cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',dd,'fluorescence'))
}
data2016 <- fieldData %>% filter(year == 2016)
alldates <- unique(data2016$date)
for (dd in alldates){
print(cruiseInterpolationPlot(fieldData,'fluorescence_mg_m3',dd,'fluorescence'))
}
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1, lims=c(0,7.5))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_gradient2(lims=c(0,7.5))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_gradientn(lims=c(0,7.5))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_gradientn(lims=c(0,7.5),colors="Greens")
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_gradientn(limits=c(0,7.5),colors="Greens")
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_continuous(limits=c(0,7.5))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_continuous(limits=c(0,7.5), "Greens")
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1) +
scale_fill_continuous(limits=c(0,7.5), palette="Greens")
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1, limits=c(0,7.5))# +
#scale_fill_distiller(palette = "Oranges", trans = "reverse",
limits = c(10,0), breaks=c(0,2,8))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1, limits=c(0,10))# +
#scale_fill_distiller(palette = "Oranges", trans = "reverse",
limits = c(10,0), breaks=c(0,2,8))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1, limits=c(0,10))
ggplot(CruiseDataInterp, aes(x=latitude, y=depth)) +
geom_tile(aes(fill = fluorescence)) +
geom_contour(aes(z = fluorescence),color="white") +
geom_point(data = cruiseData, aes(x=latitude, y=depth_m),color="black") + #adding in the measurement locations
scale_y_reverse() +
scale_x_reverse() + #so station1 is on the left and station4 is on the right
labs(y="Depth (m)", fill="fluorescence (mg m^-3)") +
scale_fill_distiller(palette="Greens",direction=1)
